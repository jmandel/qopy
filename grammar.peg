{
 var MAX_WORD_LEN = 100;
 var ALPHABET = "abcdefghijklmnopqrstuvwxyz";

 function requiredLetters(args){
    var ret = [];
    for (var i=0;i<args.length;i++){
        var ai = args[i];
        if (typeof ai === 'string' && ai.length == 1){
            ret.push(ai)
        } 
        if (ai.type){
            ret = ret.concat(ai.requiredLetters)
        }
    }
    return ret;
 }

 function lengthRange(args){
    var ranges = []
    var min = 0;
    var max = 0;
    for (var i=0;i<args.length;i++){
        var ai = args[i]
        if (typeof ai === 'string'){
            ranges.push([1,1])
            min++
            max++
        } else if (ai.match === 'anything'){
            ranges.push([0, MAX_WORD_LEN])
            max = MAX_WORD_LEN
        } else if (ai.match === 'word' || ai.match === 'reverse-word'){
            ranges.push([2, MAX_WORD_LEN])
            min += 2
            max = MAX_WORD_LEN
        } else if (ai.type === 'simple-pattern'){
            ranges.push([ai.minLength, ai.maxLength])
            min += ai.minLength
            max += ai.maxLength
        }
    }

    return [min, max, ranges]
 }

  function topGroup(op, head, tail){
    //console.log("top group", op, head, tail.length);
    var tails = tail.map(function(t){
        return t[3];
    });

    if (tails.length === 0) {
    //console.log("Juist", head)
    return head;
    }

    head = [head];
    if (tails.length > 0 && tails[0].op === op){
       head = [head[0]].concat(tails[0].args);
       tails = tails.slice(1);
    }
    return {
     type: "compound-pattern",
     op: op,
     args: head.concat(tails)}
  }
}

Start
  = QualifiedPattern / System

System
  = head:(Equation / Constraint) tail:(";" System)* ";"? {
  //console.log("TAil", tail)
    return {
      type:"system",
      equations: [head].concat(tail[0] && tail[0][1].equations || [])
    }
  }

Equation
  = _ lhs:EquationLeft _ rhs:( "=" EquationRight)? _ {
    return {
      lhs: lhs,
      rhs: rhs && rhs[1]
    }
  }

EquationLeft
  = (Variable / QualifiedPattern)+

EquationRight
  = "("  qp:QualifiedPattern ")" {
    return {type:"non-word-sequence", pattern:qp} 
  } /
  qp:QualifiedPattern {
    return {type:"word", pattern:qp}
  }

Variable
  = letter:[A-Z] {
    return {type: "variable", name:letter}
  }

Constraint
  = LengthConstraint / DifferenceConstraint

LengthConstraint
  = "|" vars:Variable+ "|" "=" val:Integer {
  return {type: "constraint", on: vars, value: val}
 }

DifferenceConstraint
  = "!=" Variable ( ("<" / ">")? Variable)*

CompoundPattern
  =  head:QopyExpr1 _ tail:(_ "|" _  CompoundPattern)*
  { return topGroup("or", head, tail); }

QopyExpr1
  = _ head:QopyExprNot _ tail:(_ "&" _ QopyExpr1)*
  { return topGroup("and", head, tail); }

QopyExprNot
  = _ "!" _ tail:QopyExprNot
  {
    if (tail && tail.op === "not") return tail.args[0]
    return {"op": "not", args: [tail]};
  } /
  QopyExprRev

QopyExprRev
  = _ "~" _  tail:QopyExprRev
  {
    return {"op": "reverse", args: [tail]};
  } /
  SimplePattern

SimplePattern
  = _ "/" _ args: Element+ _   {
    var range = lengthRange(args)
    return {
      type: "simple-pattern",
      anagram: true,
      elements: args,
      minLength: range[0],
      maxLength: range[1],
      ranges: range[2],
      requiredLetters: requiredLetters(args)
    }
  } /
  args:Element+ _  "/" _ letterbank:Element+ {
    var range = lengthRange(args)
    return {
      type: "simple-pattern",
      elements: args,
      letterbank:letterbank,
      minLength: range[0],
      maxLength: range[1],
      ranges: range[2],
      requiredLetters: requiredLetters(args)
    }
  } /
    args:Element+ {
    var range = lengthRange(args)
      return {
        type: "simple-pattern",
        elements: args,
        minLength: range[0],
        maxLength: range[1],
        ranges: range[2],
      requiredLetters: requiredLetters(args)
      }
    }

Element
  = part:(_ LOWER _ / _ QopyClass _ / _ QopySpecial _  / _ PatternInParens _ )
 {
// console.log("One elt", part);
 return part[1];
 }

PatternInParens
   = _ "(" _ pattern:QualifiedPattern _ ")" _ { return pattern }

QualifiedPattern
  = _ qualifier:Qualifier _  body:CompoundPattern
  {
 // console.log("Splicing", body)
    var ret = Object.assign({qualifier: qualifier}, body)
   // console.log("Spliced", ret)
    return ret;
  }

Qualifier
  = length:LengthSpecification? misprint:("?`" / "`")?
  {
    var ret = { };
    ret.misprintAllowed = (misprint === "?`" || misprint === "`")
    ret.misprintRequired = (misprint === "`")

    if(length){
        ret.length = length;
    } else {
        ret.length = [0, MAX_WORD_LEN];
    }

    return ret;
  }

LengthSpecification
  = lower:Integer? range:"-"? upper:Integer? ":"
  {
    var ret = [lower || 0];
    if (!range){
        ret.push(lower);
    } else ret.push(upper || 100)
    return ret;
  }


QopyClassInside
  = _ from:LOWER "-" to:LOWER _ rhs:QopyClassInside*
  {
    var chars = [];
    var start = from.charCodeAt(0);
    var end = to.charCodeAt(0);
    if (start > end) return "";
    for (var i=start; i<=end; i++){chars.push(String.fromCharCode(i));}
    return chars.join("").concat(rhs);
  }
  / lhs:LOWER rhs:QopyClassInside*
  {
    return lhs + rhs;
  }

QopyClass
  = _ "[" negated:"!"? body:QopyClassInside "]" _
  {
    if (!negated) return body;
    return ALPHABET
        .split("")
        .filter(function(c){
        return body.indexOf(c) === -1;
        })
        .join("");
  }

QopySpecial
  = "<" {return {match:"reverse-word"};} /
  ">" {return {match:"word"};} /
  "@" {return "aeiou";} /
  "#" {return "bcdfghjklmnpqrstvwxyz";} /
  "." {return ALPHABET;} /
  "*" {return {match:"anything"};}

LOWER
 = [a-z]

Integer "integer"
  = [0-9]+ { return parseInt(text(), 10); }

_ "whitespace"
  = [ \t\n\r]* {return "SPACE"}

